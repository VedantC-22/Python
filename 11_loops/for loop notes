# **Python `for` Loop – In-Depth Guide**  

The `for` loop in Python is a powerful control structure used to iterate over sequences such as lists, tuples, dictionaries, and even strings. It provides an easy way to execute repetitive tasks efficiently.

---

## **1️⃣ Introduction to `for` Loop**
### **🔹 What is a `for` Loop?**
- A `for` loop is used for **iterating over a sequence** (like a list, tuple, dictionary, set, or string).
- It automatically assigns **each item in the sequence** to a loop variable and executes the loop body.

### **🔹 Syntax of `for` Loop**
```python
for variable in sequence:
    # Loop body
```

---

## **2️⃣ Basic Example of `for` Loop**
```python
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)
```
✔ **Output:**
```
apple
banana
cherry
```
💡 **Explanation:**  
- The loop iterates over each element in the `fruits` list.
- The variable `fruit` holds the current element in each iteration.

---

## **3️⃣ Using `for` Loop with `range()`**
The `range()` function is commonly used with `for` loops to generate sequences.

### **🔹 Syntax of `range()`**
```python
range(start, stop, step)
```
- `start` (optional) → Starting number (default: `0`)
- `stop` (required) → End of the range (not included)
- `step` (optional) → Step size (default: `1`)

### **🔹 Example: Looping Through a Range**
```python
for i in range(1, 6):
    print(i)
```
✔ **Output:**
```
1
2
3
4
5
```

### **🔹 Example: Using Step Value**
```python
for i in range(2, 10, 2):
    print(i)
```
✔ **Output:**
```
2
4
6
8
```

---

## **4️⃣ Looping Over Different Data Types**
Python `for` loops work on **iterables**, including lists, tuples, dictionaries, sets, and strings.

### **🔹 Looping Through a String**
```python
for char in "Python":
    print(char)
```
✔ **Output:**
```
P
y
t
h
o
n
```

### **🔹 Looping Through a Tuple**
```python
numbers = (10, 20, 30)
for num in numbers:
    print(num)
```
✔ **Output:**
```
10
20
30
```

### **🔹 Looping Through a Dictionary (Keys & Values)**
```python
student = {"name": "Amit", "age": 20, "grade": "A"}
for key, value in student.items():
    print(f"{key}: {value}")
```
✔ **Output:**
```
name: Amit
age: 20
grade: A
```

### **🔹 Looping Through a Set**
```python
colors = {"red", "green", "blue"}
for color in colors:
    print(color)
```
✔ **Output (Order may vary as sets are unordered):**
```
red
green
blue
```

---

## **5️⃣ Nested `for` Loops**
A **nested loop** is a loop inside another loop.

### **🔹 Example: Printing a Pattern**
```python
for i in range(1, 4):
    for j in range(1, 4):
        print(i, j)
```
✔ **Output:**
```
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3
```

---

## **6️⃣ `for` Loop with `else`**
The `else` block in a `for` loop **executes after the loop completes** unless `break` is encountered.

```python
for i in range(5):
    print(i)
else:
    print("Loop completed successfully!")
```
✔ **Output:**
```
0
1
2
3
4
Loop completed successfully!
```

💡 **If a `break` statement is used inside the loop, the `else` block will NOT execute.**
```python
for i in range(5):
    print(i)
    if i == 2:
        break
else:
    print("Loop completed successfully!")
```
✔ **Output:**
```
0
1
2
```
(`else` block is skipped because of `break`)

---

## **7️⃣ Using `break` and `continue` in `for` Loops**
### **🔹 `break`: Exits the Loop Immediately**
```python
for num in range(1, 6):
    if num == 3:
        break
    print(num)
```
✔ **Output:**
```
1
2
```

### **🔹 `continue`: Skips Current Iteration**
```python
for num in range(1, 6):
    if num == 3:
        continue
    print(num)
```
✔ **Output:**
```
1
2
4
5
```

---

## **8️⃣ Looping Through a List with `enumerate()`**
The `enumerate()` function provides both **index and value** during iteration.

```python
names = ["Rahul", "Priya", "Aman"]
for index, name in enumerate(names):
    print(f"Index {index}: {name}")
```
✔ **Output:**
```
Index 0: Rahul
Index 1: Priya
Index 2: Aman
```

---

## **9️⃣ List Comprehension with `for` Loop**
List comprehensions provide a **compact way** to create lists.

```python
squares = [x**2 for x in range(1, 6)]
print(squares)
```
✔ **Output:**
```
[1, 4, 9, 16, 25]
```

💡 **Using `if` Condition in List Comprehension**
```python
even_numbers = [x for x in range(10) if x % 2 == 0]
print(even_numbers)
```
✔ **Output:**
```
[0, 2, 4, 6, 8]
```

---

## **🔟 Top Interview Questions on `for` Loop**
💡 **Q1:** How does the `for` loop work internally in Python?  
✅ **Answer:** The `for` loop uses an iterator (`iter()`) to fetch elements one by one from the iterable.

💡 **Q2:** How do you iterate over a dictionary and print both keys and values?  
✅ **Answer:**
```python
for key, value in my_dict.items():
    print(key, value)
```

💡 **Q3:** What is the difference between `for` and `while` loops?  
✅ **Answer:**
- `for` loop is **used when the number of iterations is known** (iterates over sequences).
- `while` loop is **used when the number of iterations is unknown** (runs until a condition is met).

💡 **Q4:** What happens when you use `break` inside a `for` loop?  
✅ **Answer:** The loop **terminates immediately** and skips the `else` block.

💡 **Q5:** How do you iterate over a list with indexes?  
✅ **Answer:** Using `enumerate()`:
```python
for index, value in enumerate(my_list):
    print(index, value)
```

