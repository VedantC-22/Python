# **Deep Dive into Python Sets**

## **1️⃣ Introduction & Importance**

### **What is a Set in Python?**

A **set** is an **unordered, mutable** collection of **unique** elements. It is defined using curly braces `{}` or the `set()` constructor. Unlike lists or tuples, sets do not allow duplicate values.

### **Why are Sets Important?**

- **Fast Membership Testing:** Checking if an element exists in a set is **O(1)** on average.
- **Duplicate Removal:** Automatically removes duplicate elements.
- **Mathematical Set Operations:** Supports **union, intersection, difference, and symmetric difference**.
- **Optimized Performance:** Faster than lists for lookups and membership tests.

### **How Sets Work Internally?**

- **Uses Hashing:** Elements are stored in an **unordered** manner, based on their hash values.
- **No Indexing or Slicing:** Since sets are unordered, you cannot access elements by index.
- **Handles Duplicates Automatically:** If you add a duplicate value, it is ignored.

---

## **2️⃣ Syntax & Examples**

### **Creating a Set**

```python
# Creating a set with unique values
my_set = {1, 2, 3, 4, 5}
print(my_set)  # Output: {1, 2, 3, 4, 5}

# Creating a set using set() function
another_set = set([3, 4, 5, 6, 7])
print(another_set)  # Output: {3, 4, 5, 6, 7}

# Creating an empty set (MUST use set())
empty_set = set()
print(type(empty_set))  # Output: <class 'set'>

# Adding duplicates - ignored automatically
dup_set = {1, 2, 2, 3, 3, 4}
print(dup_set)  # Output: {1, 2, 3, 4}
```

### **Edge Cases**

```python
# Sets with mixed data types
mixed_set = {1, "hello", (2, 3)}
print(mixed_set)  # Output: {1, 'hello', (2, 3)}

# Attempting to add mutable data types (will raise an error)
invalid_set = {[1, 2, 3], 5}  # TypeError: unhashable type: 'list'
```

---

## **3️⃣ Functions & Methods in Sets**

### **Basic Methods**

| Method                              | Description                                                        |   |
| ----------------------------------- | ------------------------------------------------------------------ | - |
| `add(x)`                            | Adds an element `x` to the set.                                    |   |
| `remove(x)`                         | Removes `x` from the set; raises an error if `x` is not found.     |   |
| `discard(x)`                        | Removes `x` if present; does nothing if `x` is missing.            |   |
| `pop()`                             | Removes and returns a random element.                              |   |
| `clear()`                           | Removes all elements from the set.                                 |   |
| `copy()`                            | Returns a shallow copy of the set.                                 |   |
| `update(iterable)`                  | Adds multiple elements to the set.                                 |   |
| `union(set2)` or `                 | Combines two sets.                                                 |   |
| `intersection(set2)` or `&`         | Returns common elements.                                           |   |
| `difference(set2)` or `-`           | Returns elements present in `set1` but not in `set2`.              |   |
| `symmetric_difference(set2)` or `^` | Returns elements present in either `set1` or `set2`, but not both. |   |
| `issubset(set2)`                    | Returns `True` if `set1` is a subset of `set2`.                    |   |
| `issuperset(set2)`                  | Returns `True` if `set1` is a superset of `set2`.                  |   |
| `isdisjoint(set2)`                  | Returns `True` if `set1` and `set2` have no common elements.       |   |
| `intersection_update(set2)`         | Updates the set, keeping only items found in both.                 |   |
| `difference_update(set2)`           | Updates the set, removing elements found in `set2`.                |   |
| `symmetric_difference_update(set2)` | Updates the set, keeping only elements in either set but not both. |   |

Example:

```python
s = {1, 2, 3}
s.add(4)
print(s)  # Output: {1, 2, 3, 4}

s.remove(2)
print(s)  # Output: {1, 3, 4}

s.discard(5)  # No error, even though 5 is missing

random_element = s.pop()
print(random_element, s)  # Random element removed
```

---

## **4️⃣ Frozen Sets (Immutable Sets)**

A **frozenset** is an immutable version of a set. Once created, elements cannot be added or removed.

```python
fs = frozenset([1, 2, 3, 4])
print(fs)  # Output: frozenset({1, 2, 3, 4})
fs.add(5)  # AttributeError: 'frozenset' object has no attribute 'add'
```

---

## **5️⃣ Set Comprehensions**

Set comprehensions provide a concise way to create sets.

```python
# Creating a set of squares
squares = {x**2 for x in range(1, 6)}
print(squares)  # Output: {1, 4, 9, 16, 25}

# Extracting unique vowels from a string
vowels = {char for char in 'hello world' if char in 'aeiou'}
print(vowels)  # Output: {'o', 'e'}
```

---

## **10️⃣ Top Interview Questions & Answers**

### **Q1: How do you remove duplicates from a list while maintaining order?**

```python
def remove_duplicates(lst):
    return list(dict.fromkeys(lst))

print(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))  # Output: [1, 2, 3, 4, 5]
```

### **Q2: How do you check if two sets are disjoint?**

```python
set1 = {1, 2, 3}
set2 = {4, 5, 6}

print(set1.isdisjoint(set2))  # Output: True (no common elements)
```

### **Q3: What is the difference between ************************`remove()`************************ and ************************`discard()`************************?**

```python
s = {1, 2, 3}
s.remove(2)  # Works fine
s.discard(4)  # No error, even though 4 is not in the set
```

### **Q4: How do you find missing numbers from a given range?**

```python
def find_missing_numbers(lst, n):
    return set(range(1, n + 1)) - set(lst)

print(find_missing_numbers([1, 2, 4, 6], 6))  # Output: {3, 5}
```
